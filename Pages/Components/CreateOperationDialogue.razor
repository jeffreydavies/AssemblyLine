<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Create Operation</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="nameInput">Name</label>
                    <input type="text" id="nameInput" class="form-control" @bind="Name">
                </div>
                <div class="form-group">
                    <label for="descriptionTextarea">Description</label>
                    <textarea class="form-control" id="descriptionTextarea" rows="5" @bind="Description"></textarea>
                </div>                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick=@ModalCreate>OK</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<Operation> OnCreate { get; set; }

    private string Name { get; set; }
    private string Description { get; set; }

    protected override void OnInitialized() 
    {
        Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages...";
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalCreate()
    {
        Operation operation = new Operation {
            Name=Name,
            Description=Description
        };
        return OnCreate.InvokeAsync(operation);
    }

}